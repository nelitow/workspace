#include <iostream>
#include "thread.h"
#include "semaphore.h"

using namespace std;

const int DELAY = 10000000;
const int ITERATIONS = 5;

Semaphore chopstick[5];

void * philosopher(void * arg) {
	int n = *((int*) arg);

	cout << "Philosopher " << n << " was born!\n";

	int second;
	int first = n;
	if (n != 4)
		second = n + 1;
	else
		second = 0;

	for (int i = 0; i < ITERATIONS; i++) {
		cout << "Philosopher " << n << " thinking ...\n";
	//	for (int i = 0; i < DELAY * 10; i++)			;

		chopstick[second].p();
		if ( != 0)
			chopstick[first].v();

		cout << "Philosopher " << n << " eating ...\n";
	//	for (int i = 0; i < DELAY; i++)			;
		chopstick[first].v();
		chopstick[second].v();
	}

	exit(n);
}

int main() {
	cout << "The Dining-Philosophers Problem\n";

	Thread * phil[5];
	for (int i = 0; i < 5; i++)
		phil[i] = new Thread(&philosopher, &i, sizeof(int));

	int status;
	for (int i = 0; i < 5; i++) {
		phil[i]->join(&status);
		if (status == i)
			cout << "Philosopher " << i << " went to heaven!\n";
		else
			cout << "Philosopher " << i << " went to hell!\n";
	}

	return 0;
}
